/* Maximum XOR */

/* 
Problem Description

Given an array of integers A, find and return the maximum result of A[i] XOR A[j], where i, j are the indexes of the array.

Problem Constraints
1 <= length of the array <= 100000
0 <= A[i] <= 10^9

Input Format
The only argument given is the integer array A.

Output Format
Return an integer denoting the maximum result of A[i] XOR A[j].

Example Input
Input 1:
 A = [1, 2, 3, 4, 5]
Input 2:
 A = [5, 17, 100, 11]

Example Output
Output 1:
 7
Output 2:
 117

Example Explanation
Explanation 1:
 Maximum XOR occurs between element of indicies(0-based) 1 and 4 i.e. 2 ^ 5 = 7.
Explanation 2:
 Maximum XOR occurs between element of indicies(0-based) 1 and 2 i.e. 17 ^ 100 = 117.
 */
public class q1_Max_XOR {

    // TrieNode structure
    class TrieNode {
        Character data;
        boolean isEnd;
        TrieNode[] children;

        public TrieNode(Character data) {
            this.data = data;
            isEnd = false;
            children = new TrieNode[2];
        }
    }

    public int solve(int[] A) {

        // find max element from array
        int max = A[0];
        for (int i = 0; i < A.length; i++) {
            max = Math.max(max, A[i]);
        }
        // find max no of bits
        int maxHeight = Integer.toBinaryString(max).length();

        // build Trie
        TrieNode trie = new TrieNode('$');
        buildTrie(trie, A, maxHeight);

        // search the max XOR value
        return searchAndFindMaxXorFromTrie(trie, A, maxHeight);
    }

    // check bit function
    public boolean isIthBitSet(int a, int i) {
        if (((a >> i) & 1) == 1) {
            return true;
        }
        return false;
    }

    // build Trie
    public void buildTrie(TrieNode trie, int[] A, int maxHeight) {

        for (int i = 0; i < A.length; i++) {
            TrieNode curr = trie;
            for (int j = maxHeight; j >= 0; j--) {
                int ind = isIthBitSet(A[i], j) ? 1 : 0;
                // insert 1 or 0
                if (curr.children[ind] == null) {
                    curr.children[ind] = new TrieNode(Integer.valueOf(ind).toString().charAt(0));
                }
                curr = curr.children[ind];
            }
            curr.isEnd = true;
        }
    }

    public int searchAndFindMaxXorFromTrie(TrieNode trie, int[] A, int maxHeight) {

        // initialize answer to 0
        int answer = 0;

        for (int i = 0; i < A.length; i++) {
            TrieNode curr = trie;
            int currAns = 0;
            for (int j = maxHeight; j >= 0; j--) {
                // search for toggled bit first
                int ind = !isIthBitSet(A[i], j) ? 1 : 0;

                if (curr.children[ind] != null) {
                    curr = curr.children[ind];
                    // add contribution of current bit into sum
                    currAns += Math.pow(2, j) * ind;
                } else {
                    // if toggled bit not found
                    // toggle again
                    ind = Math.abs(ind - 1);
                    if (curr.children[ind] != null) {
                        curr = curr.children[ind];
                        // add contribution of current bit into sum
                        currAns += Math.pow(2, j) * ind;
                    }
                }
            }
            // compare the answers and update max if applicable
            answer = Math.max(answer, A[i] ^ currAns);
        }
        System.out.println(answer);
        return answer;
    }

    public static void main(String[] args) {
        q1_Max_XOR o1 = new q1_Max_XOR(); // expected output 7
        o1.solve(new int[] { 1, 2, 3, 4, 5 });

        q1_Max_XOR o3 = new q1_Max_XOR(); // expected output 117
        o3.solve(new int[] { 5, 17, 100, 11 });

        q1_Max_XOR o2 = new q1_Max_XOR(); // expected output 16383
        o2.solve(new int[] { 6048, 1059, 70, 8781, 6440, 2196, 3124, 3349, 1068, 6152, 9859, 2509, 1878, 2167, 5833,
                9223, 3722, 6474, 6976, 7177, 9927, 2999, 7441, 859, 3420, 8254, 261, 8398, 3585, 6718, 3682, 1408,
                5525, 10020, 2819, 8515, 9088, 9345, 7768, 7563, 4689, 4734, 5193, 7638, 4820, 1050, 6344, 7235, 4337,
                28, 3817, 6315, 7914, 4864, 7768, 8060, 9903, 9708, 5392, 1290, 9688, 2318, 8639, 4023, 6742, 2512,
                1083, 8980, 9497, 948, 9, 1917, 6889, 8788, 7946, 2245, 5155, 6169, 5884, 9676, 8912, 2353, 4798, 2172,
                2617, 5978, 7745, 2235, 494, 5696, 6439, 3376, 9134, 8789, 5306, 4328, 4564, 434, 7449, 9870, 6926,
                5477, 1561, 7903, 602, 5312, 4115, 6504, 7955, 1991, 5766, 10019, 9855, 9731, 2511, 6637, 10048, 8763,
                9097, 5083, 9398, 8915, 4080, 6101, 430, 7018, 1354, 106, 9233, 5503, 3011, 9377, 3689, 5496, 8730,
                2992, 2833, 6459, 1926, 3490, 2017, 581, 3810, 7112, 9135, 6382, 4407, 95, 2576, 8942, 6233, 8003, 2260,
                1252, 6009, 6099, 4037, 822, 8003, 9808, 2540, 8543, 7974, 7951, 782, 9130, 6508, 1735, 8935, 1366,
                9624, 6702, 4118, 5112, 6539, 8620, 970, 263, 8695, 2107, 1788, 2613, 6665, 8992, 8493, 3040, 947, 8318,
                1803, 6966, 8035, 1498, 7639, 1293, 3258, 4483, 6141, 2845, 5403, 8060, 10020, 1424, 5688, 8897, 4759,
                6204, 3506, 6689, 7550, 783, 2970, 3199, 2139, 5943, 3429, 1568, 3571, 3422, 5880, 1363, 155, 7318,
                7137, 6156, 9860, 841, 6154, 5116, 5018, 7765, 10075, 414, 2793, 7261, 2495, 4152, 7360, 991, 4750,
                6642, 6163, 9144, 5777, 183, 8258, 6687, 549, 6629, 5996, 4361, 4712, 6088, 4888, 4527, 6964, 1155,
                1267, 5872, 7074, 4271, 3592, 7193, 604, 228, 1918, 8552, 1380, 2365, 9374, 4618, 10062, 7696, 272,
                1107, 9678, 3708, 4055, 9144, 617, 5807, 5057, 6560, 558, 5481, 8595, 9533, 922, 8413, 7546, 5953, 9855,
                8612, 4399, 7984, 7195, 1496, 4387, 6563, 740, 5855, 6118, 3646, 991, 6401, 2203, 3201, 7658, 7922,
                5176, 816, 4999, 8685, 2232, 8013, 9954, 8404, 807, 1281, 2791, 3131, 6288, 3443, 3868, 2922, 4484,
                3420, 5584, 3892, 6942, 8914, 6653, 8710, 7240, 2899, 6079, 2611, 8253, 9825, 1862, 3073, 2864, 2422,
                6467, 1308, 4608, 5082, 9083, 4735, 884, 91, 7153, 6888, 9433, 7623, 9370, 9421, 6183, 9328, 6895, 7998,
                5799, 6659, 5628, 8744, 5202, 4132, 6992, 7976, 6636, 3897, 4745, 729, 1250, 9303, 4558, 8343, 623,
                6196, 3745, 3852, 2498, 2125, 2857, 1432, 6813, 1045, 4153, 8186, 129, 1703, 8600, 2974, 9015, 4404,
                477, 1795, 6896, 7416, 8815, 6455, 8149, 230, 2345, 922, 6679, 6077, 3258, 6239, 9046, 7675, 841, 4930,
                1465, 7292, 9220, 6623, 3133, 9427, 4254, 1518, 1286, 8384, 8620, 7242, 863, 2447, 8316, 8837, 7175,
                4953, 1738, 8264, 8657, 518, 894, 2219, 9443, 4012, 1102, 536, 9263, 2378, 2581, 68, 5893, 9276, 3620,
                9374, 6976, 2341, 5760, 26, 6698, 1216, 1742, 589, 9755, 1633, 478, 4607, 5318, 7727, 6098, 5339, 4611,
                1357, 5246, 4217, 8458, 123, 4017, 4687, 5404, 986, 3215, 145, 8457, 8295, 3153, 6239, 2120, 8569, 9954,
                1127, 6272, 2883, 8868, 217, 6952, 648, 6578, 290, 3820, 3957, 8812, 31, 990, 4788, 9928, 2463, 8153,
                9491, 264, 1201, 2091, 5296, 8504, 2592, 1594, 6171, 7386, 8123, 2207, 1630, 475, 383, 6188, 4328, 7771,
                7992, 9850, 5932, 8964, 7492, 9701, 896, 3363, 6025, 1560, 1066, 2820, 6102, 7788, 9207, 8639, 6323,
                2908, 4244, 7193, 2093, 5338, 3941, 4244, 7096, 6906, 10091, 3825, 5363, 4322, 5913, 7809, 632, 5942,
                3706, 1332, 4757, 8035, 8546, 2005, 1271, 1669, 4459, 1664, 7544, 3396, 6053, 7959, 5927, 1289, 2761,
                5631, 3816, 6756, 1979, 8735, 6364, 1019, 8147, 864, 1518, 8611, 510, 5930, 3226, 538, 5252, 9445, 7613,
                8729, 5691, 10080, 4670, 3761, 657, 2185, 5159, 2357, 5695, 413, 5046, 4252, 2644, 4301, 8863, 2931,
                2652, 3171, 2238, 6615, 669, 2472, 1395, 7420, 9609, 5823, 3661, 6400, 3786, 3271, 9830, 4893, 9473,
                2866, 3749, 5113, 7828, 9553, 8306, 83, 4600, 6712, 9214, 8137, 6160, 7186, 2242, 6060, 5397, 1150,
                9047, 6374, 9762, 6502, 5470, 3062, 742, 9288, 887, 5588, 4577, 3571, 8010, 4464, 6077, 5970, 6089,
                8304, 8872, 1650, 4462, 9742, 4691, 3164, 8342, 7177, 1963, 3342, 3979, 573, 4326, 2930, 5756, 768,
                3227, 7773, 5899, 7422, 9464, 21, 5203, 4759, 7084, 9187, 8502, 3735, 5148, 6511, 2361, 3900, 7429,
                5993, 9714, 3594, 210, 2692, 3518, 4601, 4058, 1523, 1533, 3793, 8553, 3850, 6335, 7168, 7392, 493,
                2908, 9809, 1209, 654, 667, 2066, 9819, 7663, 6543, 3819, 5834, 8254, 2600, 6179, 5591, 7442, 529, 8372,
                7529, 7063, 6032, 6048, 2359, 6710, 5958, 7899, 4447, 5264, 1328, 859, 223, 3399, 3502, 7943, 8431, 977,
                933, 7098, 7629, 8600, 8319, 9439, 5745, 8459, 4289, 455, 4344, 9970, 9702, 1158, 6552, 2037, 8618,
                5416, 6705, 9265, 9570, 5230, 1210, 7808, 2965, 8, 8999, 6618, 2489, 1056, 7609, 9924, 6613, 2729, 1619,
                8824, 5054, 10034, 2351, 7560, 3382, 4061, 6544, 10033, 2575, 9821, 5881, 5566, 9733, 3532, 2472, 6925,
                6755, 6013, 8287, 7187, 1887, 1631, 8472 });

    }

}
